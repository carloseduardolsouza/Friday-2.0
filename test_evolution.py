# test_evolution.py - Teste do sistema de auto-evolu√ß√£o
import asyncio
import sys
from pathlib import Path

sys.path.append(str(Path.cwd()))

async def test_evolution():
    """Teste completo do sistema de evolu√ß√£o"""
    print("üß† TESTE DO SISTEMA DE AUTO-EVOLU√á√ÉO")
    print("="*50)
    
    try:
        # Importar sistema principal
        from core.agent import AIAgent
        from config.settings import load_config
        
        print("‚úÖ Imports realizados")
        
        # Carregar configura√ß√£o
        config = load_config()
        
        # Criar agente
        agent = AIAgent(config)
        
        # Inicializar
        await agent.initialize()
        
        print("‚úÖ Agente inicializado")
        
        # Verificar se sistema de evolu√ß√£o est√° ativo
        if hasattr(agent, 'evolution_system') and agent.evolution_system:
            print("‚úÖ Sistema de evolu√ß√£o ATIVO!")
            
            # Teste b√°sico
            print("\nüß™ TESTANDO COMANDOS DE EVOLU√á√ÉO:")
            
            commands = [
                "analise seu c√≥digo",
                "como est√° seu c√≥digo", 
                "melhore seu sistema de voz"
            ]
            
            for cmd in commands:
                print(f"\nüìù Comando: {cmd}")
                try:
                    response = await agent.process_input(cmd)
                    print(f"ü§ñ Resposta: {response[:100]}...")
                except Exception as e:
                    print(f"‚ùå Erro: {e}")
            
            print("\nüéâ TESTE CONCLU√çDO!")
            print("‚úÖ Sistema de auto-evolu√ß√£o funcionando!")
            
        else:
            print("‚ùå Sistema de evolu√ß√£o N√ÉO ATIVO")
            print("üí° Verifique se a integra√ß√£o foi bem-sucedida")
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_evolution())
