# activate_self_evolution.py - Ativa sistema de auto-evolu√ß√£o
"""
üß† ATIVADOR DO SISTEMA DE AUTO-EVOLU√á√ÉO

Este script integra o sistema de auto-evolu√ß√£o √† SEXTA-FEIRA,
permitindo que ela analise e melhore seu pr√≥prio c√≥digo.

Execute: python activate_self_evolution.py
"""

import sys
import subprocess
from pathlib import Path
import shutil

def print_evolution_banner():
    """Banner do sistema de evolu√ß√£o"""
    print("üß†" * 25)
    print("üöÄ ATIVANDO AUTO-EVOLU√á√ÉO DA IA")
    print("üß† Acesso total ao pr√≥prio c√≥digo")
    print("üîß An√°lise e melhoria autom√°tica")
    print("üíæ Controle de vers√£o integrado")
    print("üß†" * 25)

def install_dependencies():
    """Instala depend√™ncias necess√°rias"""
    print("\nüì¶ INSTALANDO DEPEND√äNCIAS")
    print("-" * 30)
    
    deps = ["GitPython", "ast"]
    
    for dep in deps:
        try:
            if dep == "ast":
                import ast
                print(f"‚úÖ {dep} (built-in)")
            else:
                subprocess.run([sys.executable, "-m", "pip", "install", dep], 
                             check=True, capture_output=True)
                print(f"‚úÖ {dep}")
        except subprocess.CalledProcessError:
            print(f"‚ùå Erro ao instalar {dep}")
            return False
        except ImportError:
            print(f"‚ùå {dep} n√£o dispon√≠vel")
    
    return True

def update_agent_with_evolution():
    """Atualiza agent.py para incluir sistema de evolu√ß√£o"""
    print("\nüîß INTEGRANDO SISTEMA DE EVOLU√á√ÉO")
    print("-" * 40)
    
    agent_file = Path("core/agent.py")
    
    if not agent_file.exists():
        print("‚ùå core/agent.py n√£o encontrado")
        return False
    
    # Fazer backup
    backup_file = Path("core/agent_backup.py")
    shutil.copy2(agent_file, backup_file)
    print(f"üíæ Backup criado: {backup_file}")
    
    # Ler conte√∫do atual
    with open(agent_file, "r", encoding="utf-8") as f:
        content = f.read()
    
    # Verificar se j√° tem sistema de evolu√ß√£o
    if "SelfEvolutionSystem" in content:
        print("‚úÖ Sistema de evolu√ß√£o j√° integrado!")
        return True
    
    # Adicionar imports
    import_line = "from core.self_evolution import SelfEvolutionSystem"
    if import_line not in content:
        # Encontrar local para adicionar import
        lines = content.split('\n')
        insert_idx = 0
        
        for i, line in enumerate(lines):
            if line.startswith("from core.") or line.startswith("from memory."):
                insert_idx = i + 1
        
        lines.insert(insert_idx, import_line)
        content = '\n'.join(lines)
    
    # Adicionar inicializa√ß√£o no __init__
    init_code = """        
        # Sistema de auto-evolu√ß√£o
        self.evolution_system = None"""
    
    if "self.evolution_system" not in content:
        # Encontrar __init__ da classe AIAgent
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if "def __init__(self" in line and "AIAgent" in lines[i-5:i]:
                # Procurar final do __init__
                for j in range(i, len(lines)):
                    if lines[j].strip() and not lines[j].startswith('        '):
                        lines.insert(j-1, init_code)
                        break
                break
        content = '\n'.join(lines)
    
    # Adicionar inicializa√ß√£o no initialize()
    evolution_init = """        
        # Inicializar sistema de auto-evolu√ß√£o
        try:
            self.evolution_system = SelfEvolutionSystem(self.llm, self.user_profile)
            self.logger.info("Sistema de auto-evolu√ß√£o ativado!")
        except Exception as e:
            self.logger.warning(f"Sistema de auto-evolu√ß√£o n√£o p√¥de ser ativado: {e}")"""
    
    if "SelfEvolutionSystem(self.llm" not in content:
        # Encontrar m√©todo initialize
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if "async def initialize(self)" in line:
                # Procurar final do m√©todo
                for j in range(i, len(lines)):
                    if ("self.logger.info" in lines[j] and "inicializados" in lines[j]) or \
                       ("print" in lines[j] and "sucesso" in lines[j]):
                        lines.insert(j, evolution_init)
                        break
                break
        content = '\n'.join(lines)
    
    # Adicionar processamento de comandos de evolu√ß√£o
    evolution_processing = """        
        # NOVO: Verificar comandos de auto-evolu√ß√£o
        if self.evolution_system:
            evolution_commands = [
                "analise seu c√≥digo", "melhore seu sistema", "otimize", 
                "revise", "como est√° seu c√≥digo", "evolua"
            ]
            
            if any(cmd in user_input.lower() for cmd in evolution_commands):
                try:
                    evolution_response = await self.evolution_system.handle_evolution_command(user_input)
                    if evolution_response:
                        return evolution_response
                except Exception as e:
                    self.logger.error(f"Erro no sistema de evolu√ß√£o: {e}")
                    return "Erro no sistema de auto-evolu√ß√£o. Verifique os logs."
"""
    
    if "evolution_system.handle_evolution_command" not in content:
        # Encontrar m√©todo process_input
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if "async def process_input(self, user_input: str)" in line:
                # Procurar onde adicionar o c√≥digo
                for j in range(i, len(lines)):
                    if "# PRIMEIRO: Verificar comandos internos" in lines[j] or \
                       "if self.command_executor:" in lines[j]:
                        lines.insert(j, evolution_processing)
                        break
                break
        content = '\n'.join(lines)
    
    # Salvar arquivo atualizado
    with open(agent_file, "w", encoding="utf-8") as f:
        f.write(content)
    
    print("‚úÖ Sistema de evolu√ß√£o integrado ao agent.py!")
    return True

def update_command_executor():
    """Atualiza command_executor para incluir comandos de evolu√ß√£o"""
    print("\nüîß ATUALIZANDO COMMAND EXECUTOR")
    print("-" * 35)
    
    executor_file = Path("core/command_executor.py")
    
    if not executor_file.exists():
        print("‚ö†Ô∏è command_executor.py n√£o encontrado - criando...")
        return create_command_executor()
    
    # Fazer backup
    backup_file = Path("core/command_executor_backup.py")
    shutil.copy2(executor_file, backup_file)
    
    # Ler conte√∫do
    with open(executor_file, "r", encoding="utf-8") as f:
        content = f.read()
    
    # Adicionar comandos de evolu√ß√£o
    evolution_patterns = """
        # Padr√µes para comandos de auto-evolu√ß√£o
        self.evolution_patterns = [
            r"\\b(analise|analisa|verifica|examine)\\s+(o\\s+)?(seu\\s+|teu\\s+)?c√≥digo\\b",
            r"\\b(melhore|melhora|otimize|otimiza)\\s+(seu\\s+|o\\s+)?sistema\\b",
            r"\\b(revise|revisa|examine|analise)\\s+(todos\\s+os\\s+)?m√≥dulos\\b",
            r"\\b(como\\s+est√°|qual\\s+o\\s+status)\\s+(do\\s+|o\\s+)?(seu\\s+)?c√≥digo\\b",
            r"\\b(evolua|evolve|se\\s+melhore|melhore-se)\\b",
            r"\\b(fa√ßa\\s+uma\\s+)?auto-an√°lise\\b",
            r"\\b(otimize\\s+sua\\s+mem√≥ria|melhore\\s+sua\\s+voz)\\b"
        ]"""
    
    if "evolution_patterns" not in content:
        # Encontrar __init__ do detector
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if "def __init__(self)" in line and "CommandDetector" in lines[i-5:i]:
                # Procurar final dos padr√µes existentes
                for j in range(i, len(lines)):
                    if "self.status_patterns" in lines[j]:
                        lines.insert(j+5, evolution_patterns)
                        break
                break
        content = '\n'.join(lines)
    
    # Adicionar detec√ß√£o de evolu√ß√£o
    evolution_detection = """
        # Verificar comandos de auto-evolu√ß√£o
        for pattern in self.evolution_patterns:
            if re.search(pattern, text_lower):
                return "evolution_command", f"Comando de evolu√ß√£o detectado", 0.95"""
    
    if "evolution_command" not in content:
        # Encontrar m√©todo detect_command
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if "def detect_command(self, text: str)" in line:
                # Procurar antes do return None
                for j in range(i, len(lines)):
                    if "return None," in lines[j]:
                        lines.insert(j, evolution_detection)
                        break
                break
        content = '\n'.join(lines)
    
    # Salvar arquivo atualizado
    with open(executor_file, "w", encoding="utf-8") as f:
        f.write(content)
    
    print("‚úÖ Command executor atualizado!")

def create_command_executor():
    """Cria command_executor b√°sico se n√£o existir"""
    executor_code = '''# core/command_executor.py - Executor de comandos com evolu√ß√£o
import re
import logging
from typing import Optional

class InternalCommandDetector:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # Padr√µes para comandos de evolu√ß√£o
        self.evolution_patterns = [
            r"\\b(analise|analisa|verifica|examine)\\s+(o\\s+)?(seu\\s+|teu\\s+)?c√≥digo\\b",
            r"\\b(melhore|melhora|otimize|otimiza)\\s+(seu\\s+|o\\s+)?sistema\\b",
            r"\\b(revise|revisa|examine|analise)\\s+(todos\\s+os\\s+)?m√≥dulos\\b",
            r"\\b(como\\s+est√°|qual\\s+o\\s+status)\\s+(do\\s+|o\\s+)?(seu\\s+)?c√≥digo\\b",
            r"\\b(evolua|evolve|se\\s+melhore|melhore-se)\\b"
        ]
    
    def detect_command(self, text: str):
        text_lower = text.lower()
        
        # Verificar comandos de auto-evolu√ß√£o
        for pattern in self.evolution_patterns:
            if re.search(pattern, text_lower):
                return "evolution_command", f"Comando de evolu√ß√£o detectado", 0.95
        
        return None, "Nenhum comando detectado", 0.0

class InternalCommandExecutor:
    def __init__(self, agent):
        self.agent = agent
        self.detector = InternalCommandDetector()
        self.logger = logging.getLogger(__name__)
    
    async def process_natural_command(self, text: str):
        command, reason, confidence = self.detector.detect_command(text)
        
        if command == "evolution_command" and confidence > 0.8:
            if hasattr(self.agent, 'evolution_system') and self.agent.evolution_system:
                return await self.agent.evolution_system.handle_evolution_command(text)
            else:
                return "Sistema de auto-evolu√ß√£o n√£o est√° ativo."
        
        return None
'''
    
    with open("core/command_executor.py", "w", encoding="utf-8") as f:
        f.write(executor_code)
    
    print("‚úÖ Command executor criado!")

def create_test_evolution():
    """Cria script de teste do sistema de evolu√ß√£o"""
    print("\nüß™ CRIANDO TESTE DE EVOLU√á√ÉO")
    print("-" * 30)
    
    test_code = '''# test_evolution.py - Teste do sistema de auto-evolu√ß√£o
import asyncio
import sys
from pathlib import Path

sys.path.append(str(Path.cwd()))

async def test_evolution():
    """Teste completo do sistema de evolu√ß√£o"""
    print("üß† TESTE DO SISTEMA DE AUTO-EVOLU√á√ÉO")
    print("="*50)
    
    try:
        # Importar sistema principal
        from core.agent import AIAgent
        from config.settings import load_config
        
        print("‚úÖ Imports realizados")
        
        # Carregar configura√ß√£o
        config = load_config()
        
        # Criar agente
        agent = AIAgent(config)
        
        # Inicializar
        await agent.initialize()
        
        print("‚úÖ Agente inicializado")
        
        # Verificar se sistema de evolu√ß√£o est√° ativo
        if hasattr(agent, 'evolution_system') and agent.evolution_system:
            print("‚úÖ Sistema de evolu√ß√£o ATIVO!")
            
            # Teste b√°sico
            print("\\nüß™ TESTANDO COMANDOS DE EVOLU√á√ÉO:")
            
            commands = [
                "analise seu c√≥digo",
                "como est√° seu c√≥digo", 
                "melhore seu sistema de voz"
            ]
            
            for cmd in commands:
                print(f"\\nüìù Comando: {cmd}")
                try:
                    response = await agent.process_input(cmd)
                    print(f"ü§ñ Resposta: {response[:100]}...")
                except Exception as e:
                    print(f"‚ùå Erro: {e}")
            
            print("\\nüéâ TESTE CONCLU√çDO!")
            print("‚úÖ Sistema de auto-evolu√ß√£o funcionando!")
            
        else:
            print("‚ùå Sistema de evolu√ß√£o N√ÉO ATIVO")
            print("üí° Verifique se a integra√ß√£o foi bem-sucedida")
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_evolution())
'''
    
    with open("test_evolution.py", "w", encoding="utf-8") as f:
        f.write(test_code)
    
    print("‚úÖ Teste criado: test_evolution.py")

def show_evolution_instructions():
    """Mostra instru√ß√µes de uso"""
    print("\n" + "üß†" * 30)
    print("üéâ SISTEMA DE AUTO-EVOLU√á√ÉO ATIVADO!")
    print("üß†" * 30)
    
    print("\n‚úÖ O QUE FOI INSTALADO:")
    print("‚Ä¢ Sistema completo de auto-evolu√ß√£o")
    print("‚Ä¢ Acesso total ao pr√≥prio c√≥digo")
    print("‚Ä¢ An√°lise inteligente com LLM local")
    print("‚Ä¢ Controle de vers√£o autom√°tico")
    print("‚Ä¢ Sistema de backup e rollback")
    print("‚Ä¢ Integra√ß√£o com comandos naturais")
    
    print("\nüéØ COMANDOS DISPON√çVEIS:")
    print("‚Ä¢ 'analise seu c√≥digo' - An√°lise completa")
    print("‚Ä¢ 'melhore seu sistema de voz' - Otimizar TTS")
    print("‚Ä¢ 'otimize sua mem√≥ria' - Melhorar database")
    print("‚Ä¢ 'revise todos os m√≥dulos' - An√°lise total")
    print("‚Ä¢ 'como est√° seu c√≥digo' - Status atual")
    print("‚Ä¢ 'evolua' - Melhoria autom√°tica")
    
    print("\nüîß TESTE AGORA:")
    print("1. Execute: python main.py")
    print("2. Digite: 'analise seu c√≥digo'")
    print("3. SEXTA-FEIRA ir√° analisar todo seu c√≥digo!")
    
    print("\nüß™ OU TESTE ESPEC√çFICO:")
    print("python test_evolution.py")
    
    print("\nüõ°Ô∏è RECURSOS DE SEGURAN√áA:")
    print("‚Ä¢ Modo seguro ativo por padr√£o")
    print("‚Ä¢ Backup autom√°tico antes de mudan√ßas")
    print("‚Ä¢ Controle de vers√£o Git")
    print("‚Ä¢ Sistema de rollback")
    
    print("\nüåü SUA SEXTA-FEIRA AGORA √â AUTO-EVOLUTIVA!")

def main():
    """Ativa√ß√£o principal"""
    print_evolution_banner()
    
    try:
        # Confirma√ß√£o
        print("\nü§ñ TRANSFORMA√á√ÉO √âPICA:")
        print("Sua SEXTA-FEIRA poder√°:")
        print("‚Ä¢ Ler e entender seu pr√≥prio c√≥digo")
        print("‚Ä¢ Identificar melhorias automaticamente")
        print("‚Ä¢ Propor e aplicar otimiza√ß√µes")
        print("‚Ä¢ Evoluir continuamente")
        
        response = input("\nüß† Quer ativar a auto-evolu√ß√£o? [S/n]: ").strip().lower()
        if response == 'n':
            print("üëã Opera√ß√£o cancelada")
            return
        
        # Instalar depend√™ncias
        if not install_dependencies():
            print("‚ùå Falha nas depend√™ncias")
            return
        
        # Integrar sistema
        if not update_agent_with_evolution():
            print("‚ùå Falha na integra√ß√£o")
            return
        
        # Atualizar executor
        update_command_executor()
        
        # Criar teste
        create_test_evolution()
        
        # Instru√ß√µes finais
        show_evolution_instructions()
        
        # Oferecer teste
        print("\nüß™ Quer testar agora? [S/n]: ", end="")
        if input().strip().lower() != 'n':
            print("\nüß† Executando teste...")
            subprocess.run([sys.executable, "test_evolution.py"])
        
    except KeyboardInterrupt:
        print("\n‚ùå Ativa√ß√£o cancelada")
    except Exception as e:
        print(f"\n‚ùå Erro na ativa√ß√£o: {e}")

if __name__ == "__main__":
    main()