# evolution_demo.py - Demonstra√ß√£o do sistema de auto-evolu√ß√£o
"""
üß† DEMONSTRA√á√ÉO DO SISTEMA DE AUTO-EVOLU√á√ÉO

Este script mostra todos os recursos do sistema de auto-evolu√ß√£o
da SEXTA-FEIRA em a√ß√£o.

Execute: python evolution_demo.py
"""

import asyncio
import sys
from pathlib import Path

sys.path.append(str(Path.cwd()))

async def demo_self_analysis():
    """Demonstra auto-an√°lise do c√≥digo"""
    print("üß† DEMO: AUTO-AN√ÅLISE DO C√ìDIGO")
    print("="*40)
    
    try:
        from core.self_evolution import SelfEvolutionSystem
        from models.local_llm import LocalLLM
        from memory.user_profile import UserProfile
        from memory.database import DatabaseManager
        from config.settings import load_config
        
        # Configurar sistema
        config = load_config()
        db = DatabaseManager(config.database)
        await db.initialize()
        
        profile = UserProfile(db)
        await profile.load_profile()
        
        llm = LocalLLM(config.model)
        await llm.initialize()
        
        # Criar sistema de evolu√ß√£o
        evolution = SelfEvolutionSystem(llm, profile)
        
        print("‚úÖ Sistema de evolu√ß√£o inicializado")
        
        # Demonstrar an√°lise
        print("\nüîç Realizando auto-an√°lise...")
        analysis = await evolution.analyze_self()
        
        print(f"\nüìä RESULTADOS:")
        print(f"   üìÑ M√≥dulos: {analysis['modules_analyzed']}")
        print(f"   üìè Linhas: {analysis['total_lines']}")
        print(f"   üîß Melhorias: {len(analysis['potential_improvements'])}")
        print(f"   ‚≠ê Score: {analysis['code_quality_score']}/100")
        
        # Mostrar algumas melhorias
        if analysis['potential_improvements']:
            print(f"\nüîß MELHORIAS IDENTIFICADAS:")
            for i, imp in enumerate(analysis['potential_improvements'][:3], 1):
                print(f"   {i}. {imp['description']} ({imp['priority']})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na demo: {e}")
        return False

async def demo_module_improvement():
    """Demonstra melhoria de m√≥dulo espec√≠fico"""
    print("\nüîß DEMO: MELHORIA DE M√ìDULO")
    print("="*35)
    
    try:
        from core.self_evolution import SelfEvolutionSystem
        from models.local_llm import LocalLLM
        from memory.user_profile import UserProfile
        from memory.database import DatabaseManager
        from config.settings import load_config
        
        # Configurar sistema
        config = load_config()
        db = DatabaseManager(config.database)
        await db.initialize()
        
        profile = UserProfile(db)
        await profile.load_profile()
        
        llm = LocalLLM(config.model)
        await llm.initialize()
        
        evolution = SelfEvolutionSystem(llm, profile)
        
        # Demonstrar melhoria de m√≥dulo
        voice_modules = [path for path, info in evolution.core_modules.items() 
                        if 'voice' in path.lower() or 'speech' in path.lower()]
        
        if voice_modules:
            module_path = voice_modules[0]
            print(f"üé≠ Analisando m√≥dulo: {module_path}")
            
            result = await evolution.improve_module(module_path)
            
            if 'improvements' in result:
                print(f"‚úÖ {len(result['improvements'])} melhorias identificadas!")
                
                for i, imp in enumerate(result['improvements'][:2], 1):
                    print(f"   {i}. {imp['description']}")
            else:
                print("‚ÑπÔ∏è Nenhuma melhoria necess√°ria no momento")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na demo: {e}")
        return False

async def demo_evolution_commands():
    """Demonstra comandos de evolu√ß√£o"""
    print("\nüí¨ DEMO: COMANDOS DE EVOLU√á√ÉO")
    print("="*35)
    
    try:
        from core.self_evolution import SelfEvolutionSystem
        from models.local_llm import LocalLLM
        from memory.user_profile import UserProfile
        from memory.database import DatabaseManager
        from config.settings import load_config
        
        # Configurar sistema
        config = load_config()
        db = DatabaseManager(config.database)
        await db.initialize()
        
        profile = UserProfile(db)
        await profile.load_profile()
        
        llm = LocalLLM(config.model)
        await llm.initialize()
        
        evolution = SelfEvolutionSystem(llm, profile)
        
        # Demonstrar comandos
        commands = [
            "analise seu c√≥digo",
            "melhore seu sistema de voz",
            "como est√° seu c√≥digo"
        ]
        
        for cmd in commands:
            print(f"\nüìù Comando: '{cmd}'")
            try:
                response = await evolution.handle_evolution_command(cmd)
                print(f"ü§ñ Resposta: {response[:150]}...")
            except Exception as e:
                print(f"‚ùå Erro: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na demo: {e}")
        return False

def demo_git_integration():
    """Demonstra integra√ß√£o com Git"""
    print("\nüìù DEMO: INTEGRA√á√ÉO GIT")
    print("="*25)
    
    try:
        import git
        
        # Verificar se √© reposit√≥rio Git
        repo = git.Repo(Path.cwd())
        
        print("‚úÖ Reposit√≥rio Git detectado")
        
        # Mostrar commits recentes
        commits = list(repo.iter_commits(max_count=5))
        
        print("üìù Commits recentes:")
        for commit in commits:
            if "[AUTO-EVOLU√á√ÉO]" in commit.message:
                print(f"   üß† {commit.message[:50]}...")
            else:
                print(f"   üìù {commit.message[:50]}...")
        
        return True
        
    except git.InvalidGitRepositoryError:
        print("‚ö†Ô∏è N√£o √© um reposit√≥rio Git")
        print("üí° O sistema criar√° um automaticamente")
        return True
    except Exception as e:
        print(f"‚ùå Erro Git: {e}")
        return False

def show_evolution_capabilities():
    """Mostra capacidades do sistema"""
    print("\nüåü CAPACIDADES DO SISTEMA DE AUTO-EVOLU√á√ÉO")
    print("="*55)
    
    capabilities = [
        "üîç An√°lise completa do pr√≥prio c√≥digo",
        "üìä M√©tricas de qualidade e complexidade",
        "üîß Identifica√ß√£o autom√°tica de melhorias",
        "üéØ Otimiza√ß√µes baseadas em IA local",
        "üíæ Sistema de backup autom√°tico",
        "üìù Controle de vers√£o integrado",
        "üõ°Ô∏è Modo seguro com rollback",
        "üß™ Testes autom√°ticos de valida√ß√£o",
        "üí¨ Comandos em linguagem natural",
        "üöÄ Evolu√ß√£o cont√≠nua e autom√°tica"
    ]
    
    for cap in capabilities:
        print(f"   {cap}")
    
    print("\nüéØ COMANDOS PRINCIPAIS:")
    commands = [
        "'analise seu c√≥digo' - An√°lise completa",
        "'melhore seu sistema de voz' - Otimizar TTS",
        "'otimize sua mem√≥ria' - Melhorar database",
        "'revise todos os m√≥dulos' - An√°lise total",
        "'como est√° seu c√≥digo' - Status atual",
        "'evolua' - Melhoria autom√°tica"
    ]
    
    for cmd in commands:
        print(f"   ‚Ä¢ {cmd}")

async def run_complete_demo():
    """Executa demonstra√ß√£o completa"""
    print("üß†" * 30)
    print("üé≠ DEMONSTRA√á√ÉO COMPLETA DO SISTEMA DE AUTO-EVOLU√á√ÉO")
    print("üß†" * 30)
    
    print("\nüéØ Esta demo mostra:")
    print("‚Ä¢ Como a SEXTA-FEIRA analisa seu pr√≥prio c√≥digo")
    print("‚Ä¢ Como identifica e prop√µe melhorias")
    print("‚Ä¢ Como responde a comandos de evolu√ß√£o")
    print("‚Ä¢ Integra√ß√£o com controle de vers√£o")
    
    input("\nPressione ENTER para continuar...")
    
    # Executar demos
    demos = [
        ("Auto-an√°lise", demo_self_analysis),
        ("Melhoria de m√≥dulo", demo_module_improvement),
        ("Comandos de evolu√ß√£o", demo_evolution_commands),
        ("Integra√ß√£o Git", demo_git_integration)
    ]
    
    results = []
    
    for name, demo_func in demos:
        print(f"\n{'='*60}")
        try:
            if asyncio.iscoroutinefunction(demo_func):
                success = await demo_func()
            else:
                success = demo_func()
            results.append((name, success))
        except Exception as e:
            print(f"‚ùå Erro em {name}: {e}")
            results.append((name, False))
    
    # Mostrar resultados
    print(f"\n{'='*60}")
    print("üìä RESULTADOS DA DEMONSTRA√á√ÉO")
    print("="*30)
    
    for name, success in results:
        status = "‚úÖ SUCESSO" if success else "‚ùå FALHOU"
        print(f"   {name}: {status}")
    
    # Mostrar capacidades
    show_evolution_capabilities()
    
    print(f"\n{'üß†' * 30}")
    print("üéâ DEMONSTRA√á√ÉO CONCLU√çDA!")
    print("üåü Sistema de auto-evolu√ß√£o em funcionamento!")
    print("üß†" * 30)

def main():
    """Demo principal"""
    try:
        # Verificar se sistema est√° dispon√≠vel
        try:
            from core.self_evolution import SelfEvolutionSystem
            print("‚úÖ Sistema de auto-evolu√ß√£o dispon√≠vel")
        except ImportError:
            print("‚ùå Sistema de auto-evolu√ß√£o n√£o instalado")
            print("üí° Execute: python activate_self_evolution.py")
            return
        
        # Executar demo
        asyncio.run(run_complete_demo())
        
    except KeyboardInterrupt:
        print("\n‚ùå Demo cancelada")
    except Exception as e:
        print(f"\n‚ùå Erro na demo: {e}")

if __name__ == "__main__":
    main()